const { ethers } = require("hardhat");
const { use, expect } = require("chai");
const { solidity } = require("ethereum-waffle");

require('dotenv').config();
const hre = require("hardhat");
const hostABI = require("@superfluid-finance/ethereum-contracts/build/contracts/Superfluid.json");
const cfaABI = require("@superfluid-finance/ethereum-contracts/build/contracts/ConstantFlowAgreementV1.json");
const fUSDCx = require("./fUSDCx");
let myAccount = "0xCa76C61ddf702aa1915C232070aFe82a92e88D05"; //process.env.ACCOUNT;

const getProvider = (() => {

  const Web3 = require("web3");
  hre.Web3 = Web3;

  // hre.network.provider is an EIP1193-compatible provider.
  hre.web3 = new Web3(hre.network.provider);
});

getProvider();


use(solidity);

describe("Loan Repayment Manager", function () {
  let loanRepaymentManagerContract;

  async function mineBlocks() {
    for (let i = 1; i <= 10; i++) {
      await hre.network.provider.request({
        method: "evm_mine",
        params: [],
      });
    }
  }

  let redirectAll;
  let tradeableCashflow;
  let _host;
  let _cfa;
  let acct1;
  let acct2;
  let superUSDC;

  beforeEach(async () => {
    // const [borrower, lender, fakeSuperFluidAddress] = await ethers.getSigners();
    // myAccount = borrower.address;
    //truffle version of testing with web3 to keep it consistent
    console.log("my account", myAccount);
    const RedirectAll = await ethers.getContractFactory("RedirectAll");
    const TradeableCashflow = await ethers.getContractFactory("TradeableCashflow");

    redirectAll = await RedirectAll.deploy("0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9", "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199")
    tradeableCashflow = await TradeableCashflow.deploy(myAccount, "Holy Grail", "GRAIL", "0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9", "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a")

    //get contract instances of each of the protocol contracts using web3.js 
    _host = new hre.web3.eth.Contract(hostABI.abi, "0x22ff293e14F1EC3A09B137e9e06084AFd63adDF9");
    _cfa = new hre.web3.eth.Contract(cfaABI.abi, "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8");
    superUSDC = new hre.web3.eth.Contract(fUSDCx, "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a");

    //account that we know has fUSDCx
    acct1 = myAccount;
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [acct1],
    });

    //account generated by hardhat runtime environment
    acct2 = "0x8626f6940e2eb28930efb4cef49b2d1f2c9c1199";
    await hre.network.provider.request({
      method: "hardhat_impersonateAccount",
      params: [acct2],
    });
  })

  it("Initial flow is correct", async function () {
    
    const netFlowBeforeGrail = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount).call();
  
    //create a flow to our tradeable cash flow holy grail nft
    const tx = await _cfa.methods.createFlow(
      "0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a",
      tradeableCashflow.address,
      "385802469135802",
      "0x"
    )
    .encodeABI()
    //create flow...
    await _host.methods.callAgreement(
      "0xEd6BcbF6907D4feEEe8a8875543249bEa9D308E8", tx, "0x").send({from: myAccount, type: "0x2"})

    const grailflowInfo = await _cfa.methods.getFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount, tradeableCashflow.address).call();
    const netFlowAfterGrail = await _cfa.methods.getNetFlow("0x8aE68021f6170E5a766bE613cEA0d75236ECCa9a", myAccount).call();

    const receiverArray = await tradeableCashflow.currentReceiver();
    console.log("Net Flow Before Grail: " + netFlowBeforeGrail);
    console.log("Net Flow After Grail: " + netFlowAfterGrail);
    console.log("Flow Rate: " + grailflowInfo.flowRate);
   
    //flow should be sent to the minter of tradable cashflow
    expect(Number(receiverArray[1])).to.equal(Number(myAccount));
    //flow rate should be the flow rate that we entered initially
    expect(grailflowInfo.flowRate.toString()).to.equal("385802469135802");
    //our initial owner should have an effective change in flow rate of 0 - they're sending value to themselves
    expect(Number(netFlowAfterGrail) - Number(netFlowBeforeGrail)).to.equal(0);
    
  });

  // describe("LoanRepaymentManagerContract", function () {
  //   it("Should deploy and register Loan Repayment", async function () {
  //     const [borrower, lender, fakeSuperFluidAddress] = await ethers.getSigners();
    
  //     const LoanRepaymentManager = await ethers.getContractFactory("LoanRepaymentManager");

  //     const Registry = await ethers.getContractFactory("LoanRepaymentRegistry");
  //     const registryContract = await Registry.deploy();

  //     loanRepaymentManagerContract = await LoanRepaymentManager.deploy(
  //       borrower.address,
  //       lender.address,
  //       35,
  //       ethers.utils.parseEther("0.10"),
  //       fakeSuperFluidAddress.address,
  //       fakeSuperFluidAddress.address,
  //       fakeSuperFluidAddress.address,
  //       registryContract.address,
  //     );

  //   });

  // });
});
